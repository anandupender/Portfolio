var yall = (function() {
  "use strict";
  return function(e) {
    e = e || {};
    var t = "IntersectionObserver",
      n = "MutationObserver",
      o = "observe",
      i = document,
      r = window,
      a = "forEach",
      c = "length",
      s = "querySelectorAll",
      u = "classList",
      l = "requestIdleCallback",
      d = "getBoundingClientRect",
      f = "EventListener",
      g = "threshold",
      v = "remove",
      y =
        t in r &&
        t + "Entry" in r &&
        "intersectionRatio" in r[t + "Entry"].prototype &&
        "isIntersecting" in r[t + "Entry"].prototype,
      m = l in r,
      p = [
        [i, "scroll"],
        [i, "touchmove"],
        [r, "resize"],
        [r, "orientationchange"]
      ],
      b = e.lazyClass || "lazy",
      h = e.lazyBackgroundClass || "lazy-bg",
      k = "idleLoadTimeout" in e ? e.idleLoadTimeout : 100,
      z = g in e ? e[g] : 200,
      C = e[o + "Changes"] || !1,
      E = "img." + b + ",video." + b + ",iframe." + b + ",." + h,
      I = { timeout: k },
      L = function(e) {
        return [].slice.call(e);
      },
      O = function(t) {
        var n,
          o = t.parentNode;
        for (var i in ("PICTURE" == o.nodeName && (n = L(o[s]("source"))),
        "VIDEO" == t.nodeName && (n = L(t[s]("source"))),
        n))
          T(n[i]);
        T(t),
          t.autoplay && t.load(),
          t[u].contains(h) &&
            (t[u][v](h), t[u].add(e.lazyBackgroundLoaded || "lazy-bg-loaded"));
      },
      T = function(e) {
        ["srcset", "src", "poster"][a](function(t) {
          t in e.dataset && (e[t] = e.dataset[t]);
        });
      },
      B = function yallBack() {
        var t = !1;
        !t &&
          w[c] &&
          ((t = !0),
          setTimeout(
            function() {
              if (
                (w[a](function(e) {
                  e[d]().top <= innerHeight + z &&
                    e[d]().bottom >= -z &&
                    "none" != getComputedStyle(e).display &&
                    (m && k
                      ? r[l](function() {
                          O(e);
                        }, I)
                      : O(e),
                    e[u][v](b),
                    (w = w.filter(function(t) {
                      return t != e;
                    })));
                }),
                (t = !1),
                !w[c] && !C)
              )
                for (var e in p) p[e][0]["remove" + f](p[e][1], yallBack);
            },
            "throttleTime" in e ? e.throttleTime : 200
          ));
      },
      w = L(i[s](E));
    if (/(google|bing|yandex|duckduck)bot/i.test(navigator.userAgent))
      for (var R in w) O(w[R]);
    else {
      if (y) {
        var S = new r[t](
          function(e, t) {
            e[a](function(e) {
              if (e.isIntersecting) {
                var n = e.target;
                m && k
                  ? r[l](function() {
                      O(n);
                    }, I)
                  : O(n),
                  n[u][v](b),
                  t["un" + o](n),
                  (w = w.filter(function(e) {
                    return e != n;
                  }))[c] ||
                    C ||
                    S.disconnect();
              }
            });
          },
          { rootMargin: z + "px 0%" }
        );
        for (var q in w) S[o](w[q]);
      } else {
        for (var x in p) p[x][0]["add" + f](p[x][1], B);
        B();
      }
      n in r &&
        C &&
        new r[n](function() {
          L(i[s](E))[a](function(e) {
            w.indexOf(e) < 0 && (w.push(e), y ? S[o](e) : B());
          });
        })[o](
          i.querySelector(e[o + "RootSelector"] || "body"),
          e.mutationObserverOptions || { childList: !0, subtree: !0 }
        );
    }
  };
})();
